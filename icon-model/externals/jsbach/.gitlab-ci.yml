workflow:
  # these rules ensure that whenever there's a merge request, a "merge request pipeline" is run,
  # but otherwise a classical branch-pipeline is run. This enables the use of merge-request specific
  # environment variables within CI.
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

stages:
  - test
  - build_doc
  - deploy

Check Style:
  stage: test
  script:
    - ./scripts/ci_scripts/check_file_format.sh
    - ./scripts/ci_scripts/check_license.sh
  tags:
    # Choose a runner with bash
    - conda
  # Run only for branches that are part of a merge request:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

Test build doc:
  stage: test
  before_script:
    - apk add --update --no-cache graphviz ttf-freefont
    - python --version ; python -m pip --version  # For debugging
    - export PATH="/root/.local/bin:$PATH"
  script:
  - rm -rf doc/html
  - sh ./build-doc.sh -q
  - rm -rf doc/html
  tags:
    - sphinx
  when: manual

pages:
  stage: build_doc
  before_script:
    - apk add --update --no-cache graphviz ttf-freefont
    - python --version ; python -m pip --version  # For debugging
    - export PATH="/root/.local/bin:$PATH"
  script:
  - rm -rf doc/html
  - sh ./build-doc.sh -q
  - mv doc/html/ public/
  tags:
    - sphinx
  artifacts:
    paths:
      - public
    expire_in: 10min
  rules:
    - if: ($CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule")

