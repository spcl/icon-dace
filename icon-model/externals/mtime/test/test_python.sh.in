#!@SHELL@
# Copyright (c) 2013-2024 MPI-M, Luis Kornblueh, Rahul Sinha and
# DWD, Florian Prill. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#

# -*- python -*-

""":"
set -e

@ENABLE_PYTHON_FALSE@exit 77

PYTHONPATH="@abs_top_builddir@/python:${PYTHONPATH}"; export PYTHONPATH
PYTHONDONTWRITEBYTECODE=1; export PYTHONDONTWRITEBYTECODE

exec @PYTHON@ "$0"
":"""
import mtime

# Test initialization and time delta arithmetics
print("-" * 80)
initial_date = mtime.DateTime("1850-01-01")
start_date = initial_date + mtime.TimeDelta("P1Y")
print(initial_date)
print(start_date)

# Test before/after tests on datetime objects
print("-" * 80)
test_result = start_date == start_date
print(str(start_date) + " == " + str(start_date) + ": " + str(test_result))
assert test_result

test_result = start_date > initial_date
print(str(start_date) + " > " + str(initial_date) + ": " + str(test_result))
assert test_result

test_result = start_date == initial_date
print(str(start_date) + " == " + str(initial_date) + ": " + str(test_result))
assert not test_result

test_result = start_date < initial_date
print(str(start_date) + " < " + str(initial_date) + ": " + str(test_result))
assert not test_result

# Test division by delta
print("-" * 80)
timestep = mtime.TimeDelta("PT15M")
test_result = (start_date, initial_date) // timestep
print(
    "({0}, {1})//{2}: {3}".format(
        start_date,
        initial_date,
        timestep,
        test_result,
    )
)
assert test_result == 35040

next_date = start_date + mtime.TimeDelta("P1Y")
after_date = next_date + mtime.TimeDelta("P1Y")
test_result = (after_date, next_date) // timestep
print(
    "({0}, {1})//{2}: {3}".format(after_date, next_date, timestep, test_result)
)
assert test_result == 35136

# Test re-initializing of calendar, showing Feb 28th and successing days

# Use default calendar (Proleptic Gregorian)
print("-" * 80)
start_day = mtime.DateTime("1852-02-28")
one_day = mtime.TimeDelta("P1D")
print(mtime.calendarToString())
print(start_day)

next_day = start_day + one_day
print(next_day)
assert next_day == mtime.DateTime("1852-02-29")

next_day += one_day
print(next_day)
assert next_day == mtime.DateTime("1852-03-01")

next_day += mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-03-02")

# Use 365 day calendar (no Feb 29th)
print("-" * 80)
mtime.setCalendar(mtime.CALENDAR_TYPE.year_of_365_days)
print(mtime.calendarToString())
print(start_day)

next_day = start_day + mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-03-01")

next_day += mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-03-02")

next_day += mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-03-03")

# Use 360 day calendar (twelve 30-day months)
print("-" * 80)
mtime.setCalendar(mtime.CALENDAR_TYPE.year_of_360_days)
print(mtime.calendarToString())
print(start_day)

next_day = start_day + mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-02-29")

next_day += mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-02-30")

next_day += mtime.TimeDelta("P1D")
print(next_day)
assert next_day == mtime.DateTime("1852-03-01")

# Test selection and string conversion for date and time only parts
print("-" * 80)
test_result = str(start_date)
print(test_result)
assert test_result == "1851-01-01T00:00:00.000"

test_result = str(start_date.date)
print(test_result)
assert test_result == "1851-01-01"

test_result = str(start_date.time)
print(test_result)
assert test_result == "00:00:00.000"
