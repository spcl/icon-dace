# Copyright (c) 2024 The YAC Authors
#
# SPDX-License-Identifier: CC0-1.0

# run for all commits to the master branch and for merge requests to the
# development repository
workflow:
  auto_cancel:
    on_new_commit: none
    on_job_failure: none
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PROJECT_ID != "413"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      auto_cancel:
        on_new_commit: interruptible
        on_job_failure: all
    - if: $CI_PIPELINE_SOURCE == "web"

# lint (development repository only):
#   - check license compliance
# prepare (development repository only):
#   - builds externals (mtime and yaxt)
#   - sets the Python virtual environment up
#   - generates the coverage report data
# test (development repository only):
#   - test_*: build and test YAC
#   - check_warning_*: checks output of test_* compiler outputs
#     - fails if it contains warnings -> pipeline can still run
#       successfully, but with warning
# document (all repositories):
#   - generate html doxygen documentation
#   - generate coverage reports (development repository only)
# publish (all repositories):
#   - uploads html pages
stages:
  - lint
  - prepare
  - test
  - document
  - publish

check_license:
  stage: lint
  rules:
    - if: $CI_PROJECT_ID == "413"
  interruptible: true
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install reuse
    - reuse --version
  script:
    - reuse lint
  tags:
    - sphinx

.init_build:
  variables:
    CC: mpicc
    CFLAGS: -O2 -g
    CXX: mpicxx
    CXXFLAGS: -O2 -g
    FC: mpif90
    FCFLAGS: -O2 -g
    AM_COLOR_TESTS: always
  rules:
    - if: $CI_PROJECT_ID == "413"
  interruptible: true

include:
  - project: "anw_dienste/ci-templates"
    file: ".slurm-ci.yml"

.init_build_levante:
  extends:
    - .default
    - .init_build
  variables:
    PARTITION: compute
    TASK_COUNT: 256
    TIME_LIMIT: "15:00"
    SCHEDULER_PARAMETERS: >-
      --account=ka1125
      --partition=$PARTITION
      --ntasks=$TASK_COUNT
      --time=$TIME_LIMIT
      --nodes=1
    MAKEFLAGS: --jobs=${TASK_COUNT}
    MPI_LAUNCH: srun --exclusive
    OMPI_MCA_btl_vader_single_copy_mechanism: none
    OMPI_MCA_opal_warn_on_missing_libcuda: disabled

.init_build_macos:
  extends: .init_build
  variables:
    MAKEFLAGS: --jobs=8
  tags:
    - mpim, macos

.levante_basic_environment: &levante_basic_environment
  - module purge
# We need the gcc module for the Intel tests to make icc work against the
# recommended installation/version of gcc. We do not need the gcc module for the
# GCC tests (OpenMPI compiler wrappers take the correct gcc/gfortran) but load
# it for the coverage report generation:
  - module load gcc/11.2.0-gcc-11.2.0
  - export PATH="/sw/spack-levante/python-3.9.9-fwvsvi/bin:$PATH"
# A helper shell function that accepts the MPI compiler wrapper command as an
# argument, extracts the real compilation/linking command line run by the
# wrapper and splits the command line options into three shell variables:
#  - smwc_CC - compiler command;
#  - smwc_CFLAGS - compiler flags;
#  - smwc_LDFLAGS - linker flags.
  - |
    # Declare split_mpi_wrapper_command()
    split_mpi_wrapper_command()
    {
      smwc_CC=; smwc_CFLAGS=; smwc_LDFLAGS=
      for arg in `$1 --show`; do
        test -n "$smwc_CC" || { smwc_CC=$arg && continue; }
        case $arg in
          -I*) smwc_CFLAGS+="$arg " ;;
          -L*|-Wl,*|-l*) smwc_LDFLAGS+="$arg " ;;
          *) smwc_CFLAGS+="$arg "; smwc_LDFLAGS+="$arg " ;;
        esac
      done
    }

.init_build_levante_gcc:
  extends: .init_build_levante
  variables:
    COMPILER_ID: gcc
  before_script:
    - *levante_basic_environment
    - module load openmpi/4.1.2-gcc-11.2.0 intel-oneapi-mkl/2022.0.1-gcc-11.2.0

.init_build_levante_nvhpc:
  extends: .init_build_levante
  variables:
    COMPILER_ID: nvhpc
  before_script:
    - *levante_basic_environment
# There is no module for the working version of OpenMPI:
    - export PATH="/sw/spack-levante/openmpi-4.1.4-3qb4sy/bin:$PATH"
# The module for NVHPC 23.9 is unusable because it overrides CC and FC:
    - export PATH="/sw/spack-levante/nvhpc-23.9-xpxqeo/Linux_x86_64/23.9/compilers/bin:$PATH"
# The working version of OpenMPI is built and configured to work with NVHPC 22.5
# but we want to use executables from the PATH:
    - export OMPI_CC=nvc
    - export OMPI_FC=nvfortran

.init_build_levante_nag:
  extends: .init_build_levante
  variables:
    COMPILER_ID: nag
    FCFLAGS: -O2 -g -gline -f2008 -C=all -nan -colour
  before_script:
    - *levante_basic_environment
    - module load openmpi/4.1.6-nag-7.2
# Set the nagfor gcc backend to the same value as in the MPI compiler wrapper:
    - export FCFLAGS="-Wc=`split_mpi_wrapper_command $CC; echo "$smwc_CC"` $FCFLAGS"

.init_build_levante_intel:
  extends: .init_build_levante
  variables:
    COMPILER_ID: intel
  before_script:
    - *levante_basic_environment
    - module load openmpi/4.1.2-intel-2021.5.0 intel-oneapi-mkl/2022.0.1-gcc-11.2.0

.init_build_macos_gcc:
  extends: .init_build_macos
  variables:
    COMPILER_ID: gcc
  before_script:
    - export PATH="$HOME/gitlab-runner/sw/YAC-dev/bin:$PATH"

.init_externals:
  variables:
    EXTERNALS_DIR: $CI_PROJECT_DIR/externals

.build_externals:
  stage: prepare
  extends: .init_externals
  variables:
    GIT_STRATEGY: none
    YAXT_TAG: release-0.10.0
    YAXT_URL: https://gitlab.dkrz.de/dkrz-sw/yaxt/-/archive/$YAXT_TAG/yaxt-$YAXT_TAG.tar.gz
    YAXT_BASIC_ARGS: >-
      --with-on-demand-check-programs
      --without-example-programs
      --without-perf-programs
    MTIME_TAG: release-1.2.1
    MTIME_URL: https://gitlab.dkrz.de/icon-libraries/libmtime/-/archive/$MTIME_TAG/libmtime-$MTIME_TAG.tar.gz
    MTIME_BASIC_ARGS: --disable-examples --disable-fortran-hl
    CACHE_KEY: runner-$CI_RUNNER_ID-$COMPILER_ID-externals-$YAXT_TAG-$MTIME_TAG
    EXTERNALS_BUILD_DIR: $CI_PROJECT_DIR/externals_build
  script:
    - test none = $CACHE_KEY || test ! -f $EXTERNALS_DIR/$CACHE_KEY || exit 0
    - rm -rf $EXTERNALS_BUILD_DIR
    - |
      # Install externals
      set -eu
      for EXTERNAL in YAXT MTIME; do
        eval "tag=\$${EXTERNAL}_TAG"
        test none != $tag || continue

        external=`echo $EXTERNAL | tr A-Z a-z`
        mkdir -p $EXTERNALS_BUILD_DIR/$external
        cd $EXTERNALS_BUILD_DIR/$external

        eval "url=\$${EXTERNAL}_URL"
        curl -L $url | tar xz --strip-components=1

        eval "basic_args=\${${EXTERNAL}_BASIC_ARGS-}"
        eval "extra_args=\${${EXTERNAL}_EXTRA_ARGS-}"
        eval "set dummy $basic_args $extra_args"; shift

        ./configure \
        --disable-maintainer-mode \
        --disable-silent-rules \
        --disable-static \
        --prefix=$EXTERNALS_DIR/$external \
        "$@"

        make install
      done
    - test none = $CACHE_KEY || touch $EXTERNALS_DIR/$CACHE_KEY
  artifacts:
    when: always
    paths:
      - $EXTERNALS_DIR
      - $EXTERNALS_BUILD_DIR/**/config.log
    expire_in: 60min
  cache:
    key: $CACHE_KEY
    paths:
      - $EXTERNALS_DIR
      - $EXTERNALS_BUILD_DIR/**/config.log

.init_python:
  variables:
    PYVENV: $CI_PROJECT_DIR/install_dir/python-venv
    PYTHON: $PYVENV/bin/python

.setup_python:
  stage: prepare
  extends: .init_python
  variables:
    GIT_STRATEGY: none
    CACHE_KEY: runner-$CI_RUNNER_ID-$COMPILER_ID-python
  script:
    - test none = $CACHE_KEY || test ! -f $PYVENV/$CACHE_KEY || exit 0
    - rm -rf $PYVENV
    - python3 -m venv $PYVENV
    - $PYVENV/bin/python -m pip install --upgrade pip setuptools
    - >
      $PYVENV/bin/python -m pip install --verbose --no-cache-dir
      cython
      matplotlib
      mpi4py
      netcdf4
      numpy
      wheel
    - test none = $CACHE_KEY || touch $PYVENV/$CACHE_KEY
  artifacts:
    paths:
      - $PYVENV
    expire_in: 60min
  cache:
    key: $CACHE_KEY
    paths:
      - $PYVENV

.check_warnings:
  variables:
    AWK_SCRIPT: '/warning/ || /WARNING/ || /Warning/'
    CHECK_WARNINGS_FILE: make.err

.check_warning_script: &check_warning_script
  - awk "$AWK_SCRIPT" $CHECK_WARNINGS_FILE > awk.out
  - "if [ -s awk.out ]; then cat awk.out; exit 166; fi"

build_externals_levante_gcc:
  extends:
    - .init_build_levante_gcc
    - .build_externals

build_externals_levante_nvhpc:
  extends:
    - .init_build_levante_nvhpc
    - .build_externals
  variables:
# The vanilla libtool does not know the Fortran compiler flag needed to make
# nvfortran produce PIC:
    MTIME_EXTRA_ARGS:
      value: FCFLAGS="$FCFLAGS -fpic"
      expand: false

build_externals_levante_nag:
  extends:
    - .init_build_levante_nag
    - .build_externals
  variables:
# The vanilla libtool does not recognize NAG behind the MPI compiler wrapper:
    MTIME_EXTRA_ARGS:
      value: FC=`split_mpi_wrapper_command $FC; echo "$smwc_CC"`
      expand: false

build_externals_levante_intel:
  extends:
    - .init_build_levante_intel
    - .build_externals

build_externals_macos_gcc:
  extends:
    - .init_build_macos_gcc
    - .build_externals
  variables:
# Enforce 'git clean -ffdx' before fetching the cache to make sure that there is
# no mismatch with the leftovers of the previous job:
    GIT_STRATEGY: fetch

setup_python_levante_gcc:
  extends:
    - .init_build_levante_gcc
    - .setup_python

setup_python_levante_nvhpc:
  extends:
    - .init_build_levante_nvhpc
    - .setup_python
  variables:
    CFLAGS: -O2 -g -noswitcherror

setup_python_levante_intel:
  extends:
    - .init_build_levante_intel
    - .setup_python

gen_cov_data:
  stage: prepare
  needs:
    - build_externals_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
  variables:
    CFLAGS: -O0 -g -fprofile-arcs -ftest-coverage -DYAC_CODE_COVERAGE_TEST
    FCFLAGS: -O0 -g -fprofile-arcs -ftest-coverage -DYAC_CODE_COVERAGE_TEST
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS=
    - make --silent --keep-going check
  artifacts:
    when: always
    paths:
      - config.log
      - "**/test-suite.log"
      - "*/**/*.gcno"
      - "*/**/*.gcda"
    expire_in: 60min

test_levante_gcc:
  stage: test
  needs:
    - build_externals_levante_gcc
    - setup_python_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    AWK_SCRIPT: '!/_pyx/ && (/warning/ || /WARNING/ || /Warning/)'
    CFLAGS: -O2 -g -Wall -Wextra -Wpedantic -fsignaling-nans
    FCFLAGS: -O2 -g -Wall -ffpe-trap=invalid -fcheck=bounds -fimplicit-none -fmodule-private
  script:
    - split_mpi_wrapper_command $CC
    - export CC=$smwc_CC; export MPI_CFLAGS=$smwc_CFLAGS; export MPI_CLIBS=$smwc_LDFLAGS
    - split_mpi_wrapper_command $FC
    - export FC=$smwc_CC; export MPI_FCFLAGS=$smwc_CFLAGS; export MPI_FCLIBS=$smwc_LDFLAGS
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-python-bindings
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
      - $CHECK_WARNINGS_FILE
    expire_in: 30min

test_levante_nvhpc:
  stage: test
  needs:
    - build_externals_levante_nvhpc
    - setup_python_levante_nvhpc
  extends:
    - .init_build_levante_nvhpc
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    AWK_SCRIPT: '!/_pyx/ && !/diag_suppress/ && (/warning/ || /WARNING/ || /Warning/)'
    CFLAGS: -O2 -g -Wall
    FCFLAGS: -O2 -g -Wall
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-python-bindings
      --with-external-lapack=fortran
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      yac_cv_fc_is_contiguous_works=yes
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_nag:
  stage: test
  needs:
    - build_externals_levante_nag
  extends:
    - .init_build_levante_nag
    - .init_externals
    - .check_warnings
  variables:
    CFLAGS: -O0 -g -Wall
    FCFLAGS: -O0 -g -C=all
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --with-external-lapack=fortran
      --with-external-mtime
      --with-fortran-lapack-lib=/sw/spack-levante/netlib-lapack-3.9.1-krseg4/lib64
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.9.2-ytsqvg
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_intel:
  stage: test
  needs:
    - build_externals_levante_intel
    - setup_python_levante_intel
  extends:
    - .init_build_levante_intel
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    CFLAGS: -O2 -g -Wall
    FCFLAGS: -O2 -g -warn all,noerrors,nostderrors -fpe0
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-python-bindings
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-f7hh57
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_gcc_long_double_64:
  stage: test
  needs:
    - build_externals_levante_gcc
    - setup_python_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    CFLAGS: -O0 -g -Wall -mlong-double-64
    FCFLAGS: -O0 -g -Wall
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-python-bindings
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_gcc_core_only:
  stage: test
  needs:
    - build_externals_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .check_warnings
  variables:
    CFLAGS: -O0 -g -Wall
    FCFLAGS: -O0 -g -Wall
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-lib-core-only
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_gcc_O3:
  stage: test
  needs:
    - build_externals_levante_gcc
    - setup_python_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .init_python
  variables:
    CFLAGS: -O3 -g -Wall -fsignaling-nans
    FCFLAGS: -O3 -g -Wall -ffpe-trap=invalid
  script:
    - enable_maintainer_mode='no'
    - test -f ./configure || { ./autogen.sh && enable_maintainer_mode='yes'; }
    - >
      ./configure
      --disable-examples
      --disable-mci
      --disable-mpi-checks
      --disable-netcdf
      --disable-python-bindings
      --disable-tools
      --disable-utils
      --enable-maintainer-mode="${enable_maintainer_mode}"
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
    - ulimit -c 0
    - >
      make distcheck DISTCHECK_CONFIGURE_FLAGS="
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-examples
      --enable-maintainer-mode
      --enable-mci
      --enable-netcdf
      --enable-option-checking=fatal
      --enable-python-bindings
      --enable-tools
      --enable-utils
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS='`pkg-config --cflags mkl-static-lp64-seq`'
      MKL_CLIBS='`pkg-config --libs mkl-static-lp64-seq`'"
    - >
      make distcheck DISTCHECK_CONFIGURE_FLAGS="
      --disable-deprecated
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-examples
      --enable-maintainer-mode
      --enable-mci
      --enable-netcdf
      --enable-option-checking=fatal
      --enable-python-bindings
      --enable-tools
      --enable-utils
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS='`pkg-config --cflags mkl-static-lp64-seq`'
      MKL_CLIBS='`pkg-config --libs mkl-static-lp64-seq`'"
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "yac-*/**/config.log"
      - "**/test-suite.log"
    expire_in: 30min

test_levante_gcc_disable_netcdf:
  stage: test
  needs:
    - build_externals_levante_gcc
    - setup_python_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    CFLAGS: -O2 -g -Wall
    FCFLAGS: -O2 -g -Wall
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-netcdf
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-python-bindings
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_levante_gcc_openmp:
  stage: test
  needs:
    - build_externals_levante_gcc
    - setup_python_levante_gcc
  extends:
    - .init_build_levante_gcc
    - .init_externals
    - .init_python
    - .check_warnings
  variables:
    CFLAGS: -O2 -g -Wall -fsignaling-nans
    FCFLAGS: -O2 -g -Wall -ffpe-trap=invalid -fcheck=bounds
    OMP_NUM_THREADS: 4
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-mpi-checks
      --disable-silent-rules
      --enable-concurrent-mpi-tests
      --enable-openmp
      --enable-python-bindings
      --with-external-mtime
      --with-fyaml-root=/sw/spack-levante/libfyaml-0.7.12-fvbhgo
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/sw/spack-levante/netcdf-c-4.8.1-6qheqr
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
      MKL_CFLAGS="`pkg-config --cflags mkl-static-lp64-seq`"
      MKL_CLIBS="`pkg-config --libs mkl-static-lp64-seq`"
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

test_macos_gcc:
  stage: test
  needs:
    - build_externals_macos_gcc
  extends:
    - .init_build_macos_gcc
    - .init_externals
    - .check_warnings
  variables:
    CFLAGS: -O2 -g -Wall
    FCFLAGS: -O2 -g -Wall
  script:
    - test -f ./configure || ./autogen.sh
    - >
      ./configure
      --disable-silent-rules
      --enable-maintainer-mode
      --enable-option-checking=fatal
      --with-external-lapack=fortran
      --with-external-mtime
      --with-fyaml-root=/opt/local
      --with-mtime-root=$EXTERNALS_DIR/mtime
      --with-netcdf-root=/opt/local
      --with-yaxt-root=$EXTERNALS_DIR/yaxt
    - make check AM_COLOR_TESTS=no TESTS= 2> >(tee $CHECK_WARNINGS_FILE)
    - make --silent --keep-going check
    - *check_warning_script
  artifacts:
    when: on_failure
    paths:
      - config.log
      - "**/test-suite.log"
    expire_in: 30min

gen_doxy_html:
  stage: document
  needs:
    - job: gen_cov_data
      artifacts: false
      optional: true
  extends: .check_warnings
  variables:
    PLANTUML_JAR: '/usr/share/java/plantuml.jar'
    AWK_SCRIPT: '/warning/ && !/doc\/Doxyfile/ && !/doxygen -u/ && !/DOT_GRAPH_MAX_NODES/'
    CHECK_WARNINGS_FILE: doxy.err
  script:
    - doxygen --version
    - doxygen doc/Doxyfile 2> >(tee $CHECK_WARNINGS_FILE)
    - *check_warning_script
  artifacts:
    expire_in: 30min
    paths:
    - doc/html
    - doxy.err
  tags:
    - doxygen

.gen_cov_rep:
  stage: document
  extends: .init_build_levante_gcc
  variables:
    PARTITION: shared
    TASK_COUNT: 1
    TIME_LIMIT: "20:00"
  needs:
    - gen_cov_data
  interruptible: true
  before_script:
    - *levante_basic_environment
    - python3 -m venv gcovr
    - gcovr/bin/python -m pip install --upgrade pip setuptools
# Install the exact version of gcovr to avoid uncontrolled changes in the
# coverage reports when a newer version of the tool is released
    - gcovr/bin/python -m pip install --verbose --no-cache-dir gcovr==7.2
    - export PATH="$(pwd)/gcovr/bin:$PATH"

gen_cov_rep_html:
  extends: .gen_cov_rep
  rules:
    - if: $CI_PROJECT_ID == "413"
  script:
    - mkdir coverage coverage_tests
    - >
      gcovr
      --html-details
      --exclude-unreachable-branches
      -o coverage_tests/index.html
      --root .
      -f tests
    - >
      gcovr
      --html-details
      --exclude-unreachable-branches
      --print-summary
      -o coverage/index.html
      --root .
      -f src
      -f tools
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage
      - coverage_tests
    expire_in: 30min

# generate coverage report for diff view of merge request
gen_cov_rep_xml:
  extends: .gen_cov_rep
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - >
      gcovr
      --xml-pretty
      --exclude-unreachable-branches
      -o coverage.xml
      --root .
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
   expire_in: 1 week
   reports:
     coverage_report:
       coverage_format: cobertura
       path: coverage.xml

pages:
  stage: publish
  variables:
    GIT_STRATEGY: none
  needs:
    - job: gen_cov_rep_html
      optional: true
    - gen_doxy_html
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"
  script:
    - mv doc/html/ public/
    - test ! -d coverage || mv coverage/ public/coverage
    - test ! -d coverate_tests || mv coverage_tests public/coverage_tests
  artifacts:
    expire_in: 30min
    paths:
      - public
  tags:
    - doxygen
