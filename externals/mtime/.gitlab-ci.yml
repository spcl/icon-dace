# Copyright (c) 2013-2024 MPI-M, Luis Kornblueh, Rahul Sinha and DWD, Florian Prill. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
workflow:
  auto_cancel:
    on_new_commit: none
    on_job_failure: none
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH =~ /^release-.*/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      auto_cancel:
        on_new_commit: interruptible
        on_job_failure: all
    - if: $CI_PIPELINE_SOURCE == "web"

.colorized:
  variables:
    DEFAULT: '\033[0m'
    RED: '\033[0;31m'

Check licenses:
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install reuse
    - reuse --version
    # Fetch extra licenses for automatically generated Autotools files:
    - test ! -f ./configure || reuse download --all
  script:
    - reuse lint
  tags:
    - sphinx
  interruptible: true

Check style:
  extends: .colorized
  variables:
    STYLE_PATCH: ${CI_PROJECT_DIR}/style.patch
  before_script:
    - apk add black clang-extra-tools git py3-flake8 py3-isort py3-pip python3
    # We use --break-system-packages because fprettify is not installable via
    # "apk add py3-fprettify":
    - python -m pip install --break-system-packages fprettify
  script:
    # Exclude the automatically generated mtime_iso8601.c:
    - >-
      clang-format --style=file -i
      $(find ${CI_PROJECT_DIR} -name 'mtime_iso8601.c' -prune -o \( -name '*.h' -o -name '*.c' \) -print)
    # We do not use a config file but specify the formatting arguments on the
    # command line because the feature does not work for certain arguments even
    # in the latest release
    # (e.g., see https://github.com/pseewald/fprettify/issues/94):
    - >-
      fprettify
      --case 2 2 2 1
      --indent 2
      --whitespace 2
      --recursive ${CI_PROJECT_DIR}
      --fortran .inc
      --fortran .f90
    - isort ${CI_PROJECT_DIR} ${CI_PROJECT_DIR}/test/test_python.sh.in --profile black --skip-gitignore --line-length 80
    - black ${CI_PROJECT_DIR} ${CI_PROJECT_DIR}/test/test_python.sh.in --line-length 80
    - flake8 ${CI_PROJECT_DIR} ${CI_PROJECT_DIR}/test/test_python.sh.in --max-line-length 80
    - git -C ${CI_PROJECT_DIR} diff --patch-with-raw > ${STYLE_PATCH}
    - |
      # Test if patching is necessary
      test ! -s ${STYLE_PATCH} || {
        printf "${RED}The source code does not meet the style recuirements. \
      Please, apply the patch (see artifacts).${DEFAULT}\n"

        printf "${RED}Note that the result of the formatting might depend on \
      the versions of the formatting tools (clang-format and fprettify). In \
      this project, whatever formatting this CI job produces if the correct \
      one. If it expects you to re-format parts of the source code that you \
      did not modify, do so in a separate commit, which must not be squashed, \
      and list the commit in the '.git-blame-ignore-revs' file.${DEFAULT}\n"

        exit 1
      }
  artifacts:
    paths:
      - ${STYLE_PATCH}
    expire_in: 60min
    expose_as: 'Style Patch'
    when: on_failure
  tags:
    -  alpine
  interruptible: true

include:
  - project: "anw_dienste/ci-templates"
    file: ".slurm-ci.yml"

.common:
  extends:
    - .default
    - .colorized
  variables:
    TIME_LIMIT: "05:00"
    SCHEDULER_PARAMETERS: >-
      --account=ka1125
      --time=$TIME_LIMIT
      --partition=shared
      --nodes=1
    GIT_DEPTH: 1
    CC: gcc
    CFLAGS: -g -O2
    FC: gfortran
    FCFLAGS: -g -O2
    CONFIG_EXTRA_ARGS: --disable-fortran-hl
    LIBCHEK_ROOT: ${CI_PROJECT_DIR}/libcheck
    LIBCHECK_URL: https://github.com/libcheck/check/releases/download/0.15.2/check-0.15.2.tar.gz
    LIBCHECK_SHA256: a8de4e0bacfb4d76dd1c618ded263523b53b85d92a146d8835eb1a52932fa20a
    MAKEFLAGS: --jobs=8 V=1
    AM_COLOR_TESTS: always
    WARNINGS_AWK_SCRIPT: '/warning/ || /WARNING/ || /Warning/'
    WARNINGS_FILE: ${CI_PROJECT_DIR}/make_warnings.txt
  before_script:
    - module purge
    - module load gcc/11.2.0-gcc-11.2.0
    - |
      # Install libcheck
      if test ! -d "${LIBCHEK_ROOT}"; then
        (
          set -x
          mkdir build_libcheck && \
          cd build_libcheck && \
          curl -L "${LIBCHECK_URL}" > check.tar.gz && \
          echo "${LIBCHECK_SHA256} check.tar.gz" | sha256sum -c && \
          tar xf check.tar.gz --strip-components=1 && \
          ./configure --disable-static --prefix="${LIBCHEK_ROOT}" CC=gcc CFLAGS='-g -O2' CPPFLAGS= && \
          make install
        ) || {
          printf "${RED}Failed to install libcheck.${DEFAULT}\n"
          exit 1
        }
      fi
  script:
    - >
      test -f ./configure &&
      enable_maintainer_mode='no' ||
      { ./autogen.sh && enable_maintainer_mode='yes'; }
    - mkdir build && cd build
    - >
      ../configure
      --enable-check
      --with-check-root="${LIBCHEK_ROOT}"
      --enable-python
      --enable-maintainer-mode="${enable_maintainer_mode}"
      ${CONFIG_EXTRA_ARGS}
    - make --output-sync=target check AM_COLOR_TESTS=no TESTS= 2> >(tee ${WARNINGS_FILE})
    - make --silent --keep-going check
    - awk "${WARNINGS_AWK_SCRIPT}" ${WARNINGS_FILE} > awk.out
    - |
      # Check if there are compiler warnings
      test ! -s awk.out || {
        printf "${RED}The compiler issued warnings (see artifacts).${DEFAULT}\n"
        exit 1
      }
  interruptible: true
  artifacts:
    when: on_failure
    paths:
      - ${WARNINGS_FILE}
  cache:
    policy: pull
    key: ${LIBCHECK_SHA256}
    paths:
      - ${LIBCHEK_ROOT}

Check with GCC 11.2.0:
  extends: .common
  variables:
    CFLAGS: -g -O2 -Wall -Wextra -pedantic
    FCFLAGS: -g -O2 -Wall -Wextra -pedantic
  cache:
    policy: pull-push

Check with Intel 2021.5.0:
  extends: .common
  variables:
    CC: icc
    FC: ifort
    # Ignore the warning on a deprecated flag injected by libtool:
    WARNINGS_AWK_SCRIPT: '!/-nofor_main/ && (/warning/ || /WARNING/ || /Warning/)'
  before_script:
    - !reference [.common, before_script]
    - module load intel-oneapi-compilers/2022.0.1-gcc-11.2.0

Check with NVHPC 22.5:
  extends: .common
  variables:
    CC: nvc
    FC: nvfortran
  before_script:
    - !reference [.common, before_script]
    - module load nvhpc/22.5-gcc-11.2.0

Check with NAG 7.1.7114:
  extends: .common
  variables:
    FC: nagfor
    # Ignore Questionable warnings:
    WARNINGS_AWK_SCRIPT: '!/^\[NAG Fortran Compiler normal termination/ && (/warning/ || /WARNING/ || /Warning/)'
  before_script:
    - !reference [.common, before_script]
    - module load nag/7.1-gcc-11.2.0
    - export FCFLAGS="-Wc=`which gcc` $FCFLAGS"
