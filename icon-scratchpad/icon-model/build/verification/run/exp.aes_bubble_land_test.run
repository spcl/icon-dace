#! /bin/bash
#-----------------------------------------------------------------------------
set +x

#-----------------------------------------------------------------------------
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/run/make_target_runscript
# target machine is default
# target use_compiler is gcc
# with_mpi=no
# with_openmp=no
# memory_model=large
# submit with 
#
builder=default_gcc
#-----------------------------------------------------------------------------
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=static
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
: ${no_of_nodes:=1} ${mpi_procs_pernode:=1}
export no_of_nodes
export mpi_procs_pernode
num_io_procs=
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=48
nproma_sub=48
nblocks_c=0
proc0_shift=0
#
# Ecrad solver (0 for CPU/vector, 2 for GPU)
# ------------------------------------------
radiation_ecrad_isolver=0
#
#-----------------------------------------------------------------------------

# load local setting, if existing
# -------------------------------
if [ -a /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting ]
then
  echo "Load Setting"
  . /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="aes_bubble_land_test"

#-----------------------------------------------------------------------------
# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
export basedir="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification"
# experiments_dir can be predefined in a machine specific run_target_* header
experiments_dir="${experiments_dir:=${basedir}/experiments}"
export icon_data_rootFolder="/home/primrose/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START=""
export MODEL="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/bin/icon"

set | grep SLURM

# how to submit the next job
# --------------------------
submit=""
job_name="exp.aes_bubble_land_test.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ${basedir}/run/add_run_routines

#-----------------------------------------------------------------------------

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#--------------------------------------------------------------------------------------------------
#
# Radiative convective equilibrium (RCE) experiment with land
#
author_list="Bjorn Stevens, Sebastian Rast, Monika Esch, Reiner Schnur (MPI-M)"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes a radiative convective equilibrium experiment based on the non-hydrostatic
# atmosphere and the ECHAM physics with NWP "graupel" scheme. The experiment is intialized 
# analytically in the atmosphere and uses constant-in-time boundary conditions for:
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
#
# No aerosols are used. The land (JSBACH) is represented as a desert surface without lakes or
# glaciers, and spatially constant initial conditions.
#
#--------------------------------------------------------------------------------------------------

# (1) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/public/mpim"

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism

# horizontal grid(s)
#
grids_folder=${icon_data_poolFolder}/Torus_Triangles_20x4_5000m
#
# domain Torus
grid_name=Torus_Triangles_20x4_5000m
edge_length=5000 #Resolution [m]
num_columns=20 # Number of columns in y-direction
#
atmo_dyn_grids="'${grid_name}.nc',"

modelTimeStep="PT20S"
radiationTimeStep="PT2M"

# start and end date+time
start_date=${start_date:="2008-08-01T00:00:00Z"}
    end_date=${end_date:="2008-08-01T01:00:00Z"}

calendar="360 day year"

# restart intervals
checkpoint_interval="PT30M"
restart_interval="P1D"

# output intervals
output_interval_2d="PT10M"
output_interval_3d="PT10M"
file_interval_2d="PT10M"
file_interval_3d="PT10M"

output_atm_cgrid="no" # 1 file
output_atm_2d="yes"   # 1 file
output_atm_3d="yes"   # 1 file
output_lnd="yes"      # 1 file

# determine the number of io processes
nproma=40
nproma_sub=40
num_io_procs=1
nblocks_c=0

# namelist files
atmo_namelist=NAMELIST_${EXPNAME}_atm

#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# atmospheric dynamics and physics
# --------------------------------
cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma            = ${nproma}
 num_io_procs      = ${num_io_procs}
 nproma_sub        = ${nproma_sub}
 nblocks_c         = 0
 io_process_stride = 6
/
&grid_nml
 dynamics_grid_filename = ${atmo_dyn_grids}
 grid_angular_velocity  = 0.
/
&run_nml
 num_lev          = 70          ! number of full levels
 modelTimeStep    = "$modelTimeStep"
 ltestcase        = .TRUE.      ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 12          ! level of details report during integration
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
 profiling_output = 1           ! aggregated: 1; detailed: 2; in files: 3
/
&nh_testcase_nml
 nh_test_name     = 'aes_bubble_land'
 zenithang        = 42.05       ! degrees
 sol_const        = 551.58
/
&aes_bubble_nml
 aes_bubble_config%t0  =298.15
/
&nonhydrostatic_nml
 ndyn_substeps    = 5           ! dtime/dt_dyn
 damp_height      = 22500.      ! [m]
 rayleigh_coeff   = 0.10
 vwind_offctr     = 0.2
 divdamp_fac      = 0.002
 htop_moist_proc  = 22500.
/
&interpol_nml
 rbf_scale_mode_ll = 1
 rbf_vec_scale_c   = 0.45
 rbf_vec_scale_v   = 0.45
 rbf_vec_scale_e   = 0.45
/
&sleve_nml
 min_lay_thckn    = 20.         ! [m]
 max_lay_thckn    = 400.        ! [m] maximum layer thickness below htop_thcknlimit
 htop_thcknlimit  = 30000.      ! [m] this implies that the upcoming COSMO-EU nest will have 60 levels
 top_height       = 30000.      ! [m]
 stretch_fac      = 0.7
 decay_scale_1    = 4000.       ! [m]
 decay_scale_2    = 2500.       ! [m]
 decay_exp        = 1.2
 flat_height      = 30000.      ! [m]
/
&transport_nml
 tracer_names     = 'hus','clw','cli','qr','qs','qg',
 ivadv_tracer     =    3 ,   3 ,   3 ,  3 ,  3 ,  3 ,
 itype_hlimit     =    3 ,   4 ,   4 ,  4 ,  4 ,  4 ,
 ihadv_tracer     =   20 ,  20 ,  20 , 20 , 20 , 20 ,
/
&dynamics_nml
 lcoriolis      = .FALSE.
 lmoist_thdyn   = .TRUE.
/
&aes_phy_nml
!
! domain 1
! --------
!
! atmospheric physics (""=never)
 aes_phy_config(1)%dt_rad = "$radiationTimeStep"
 aes_phy_config(1)%dt_vdf = "$modelTimeStep"
 aes_phy_config(1)%dt_mig = "$modelTimeStep"
 aes_phy_config(1)%dt_two = ""
!
! surface (.TRUE. or .FALSE.)
 aes_phy_config(1)%ljsb   = .TRUE.
 aes_phy_config(1)%lamip  = .FALSE.
 aes_phy_config(1)%l2moment  = .FALSE.
 aes_phy_config(1)%lice   = .FALSE.
 aes_phy_config(1)%lmlo   = .FALSE.
 aes_phy_config(1)%llake  = .FALSE.
!
! fix negative humidity
 aes_phy_config(1)%iqneg_d2p = 2
 aes_phy_config(1)%iqneg_p2d = 2
! set htop_moist_proc also as top of graupel calculation
 aes_phy_config(1)%zmaxcloudy = 22500.
/
&aes_rad_nml
!
! domain 1
! --------
!
 aes_rad_config(1)%isolrad    =  5
 aes_rad_config(1)%l_orbvsop87= .FALSE.
 aes_rad_config(1)%cecc       = 0.0
 aes_rad_config(1)%cobld      = 0.0
 aes_rad_config(1)%ldiur      = .FALSE.
 aes_rad_config(1)%l_sph_symm_irr = .TRUE.
 aes_rad_config(1)%irad_h2o   =  1
 aes_rad_config(1)%irad_co2   =  2
 aes_rad_config(1)%irad_ch4   =  2
 aes_rad_config(1)%irad_n2o   =  2
 aes_rad_config(1)%irad_o3    =  0
 aes_rad_config(1)%irad_o2    =  0
 aes_rad_config(1)%irad_cfc11 =  0
 aes_rad_config(1)%irad_cfc12 =  0
 aes_rad_config(1)%irad_aero  =  0
/
&aes_vdf_nml
 aes_vdf_config(1)%pr0        = 0.7
 aes_vdf_config(1)%turb       = 2
/
&aes_cop_nml
 aes_cop_config(1)%cn1lnd     =  50.0
 aes_cop_config(1)%cn2lnd     = 220.0
 aes_cop_config(1)%cn1sea     =  50.0
 aes_cop_config(1)%cn2sea     = 100.0
 aes_cop_config(1)%cinhomi    =   1.0
 aes_cop_config(1)%cinhoms    =   1.0
 aes_cop_config(1)%cinhoml   =   1.0
/
&aes_cov_nml
 aes_cov_config(1)%cqx        = 1.e-6
/
EOF

jsbach_namelist=NAMELIST_${EXPNAME}_lnd # also used in exec.iconrun
#
cat > ${jsbach_namelist} << EOF
&jsb_model_nml
  usecase                 = 'jsbach_lite'
  use_lakes               = .FALSE.
  use_glacier             = .FALSE.
  fract_filename          = 'bc_land_frac.nc'
  enforce_water_budget    = 'error'     ! Error: stop in case of water conservation problem
/
&jsb_seb_nml
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple      = .TRUE.
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map          = .FALSE.
  l_heat_cond_map         = .FALSE.
  l_heat_cap_dyn          = .FALSE.
  l_heat_cond_dyn         = .FALSE.
  l_snow                  = .TRUE.
  l_dynsnow               = .TRUE.
  l_freeze                = .TRUE.
  l_supercool             = .FALSE.
  bc_filename             = 'bc_land_soil.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic               = .FALSE.
  bc_filename             = 'bc_land_soil.nc'
  ic_filename             = 'ic_land_soil.nc'
  bc_sso_filename         = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active                  = .FALSE.
/
&jsb_pheno_nml
  scheme                  = 'climatology'
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active                  = .FALSE.
/
&jsb_fuel_nml
  active                  = .FALSE.
/
&jsb_disturb_nml
  active                  = .FALSE.
/
EOF


#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
# Radiation:
add_link_file ${basedir}/data/rrtmgp-gas-lw-g128.nc         ./coefficients_lw.nc
add_link_file ${basedir}/data/rrtmgp-gas-sw-g112.nc         ./coefficients_sw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_lw.nc           ./rrtmgp-cloud-optics-coeffs-lw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_sw.nc           ./rrtmgp-cloud-optics-coeffs-sw.nc
# Two Moment scheme input
add_link_file ${basedir}/data/dmin_wetgrowth_lookup.nc                  ./ # for inwp_gscp==4

# namelist files
#
add_required_file ${basedir}/run/${atmo_namelist}                       ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                           ./

# boundary conditions
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
# - ozone
datadir=${icon_data_poolFolder}/Torus_Triangles_20x22_5000m/r0006
add_link_file ${datadir}/rcemip_analytical_o3_20x22_5000m_echam_plev.nc ./bc_ozone.nc

datadir=${icon_data_poolFolder}/Torus_Triangles_20x4_5000m/land/r0001
add_link_file $datadir/ic_land_soil_1850.nc                               ./ic_land_soil.nc
add_link_file $datadir/bc_land_frac_1850.nc                               ./bc_land_frac.nc
add_link_file $datadir/bc_land_phys_1850.nc                               ./bc_land_phys.nc
add_link_file $datadir/bc_land_soil_1850.nc                               ./bc_land_soil.nc
add_link_file $datadir/bc_land_sso_1850.nc                                ./bc_land_sso.nc
#
# - lctlib file for JSBACH
add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def          ./lctlib_nlct21.def

#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 output_nml_dict  = "${dict_file}"
 netcdf_dict      = "${dict_file}"
 lnetcdf_flt64_output = .TRUE.
 itype_pres_msl   = 4
 restart_file_type= 5
 inextra_3d       = 0
 inextra_2d       = 0
 !restart_write_mode = "joint procs multifile"    !not necessary/useful in default r2b4 setup
/
EOF
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.
#
if [[ "$output_atm_cgrid" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_cgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"          ! output_start = output_end
 output_end       = "${start_date}"          ! --> write once only irrespective of
 output_interval  = "${output_interval_2d}"  !     the output interval and
 file_interval    = "${file_interval_2d}"    !     the file interval
 ml_varlist       = 'clon'   , 'clat' , 'areacella', 'zghalf' , 'zg'   ,
/
EOF
fi
#
if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval_3d}"
 file_interval    = "${file_interval_3d}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'pfull'   , 'zg'      ,
                    'rho'     , 'ta'      , 'theta_v' ,
                    'ua'      , 'va'      , 'wa'      ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'qr'      , 'qs'      , 'qg'      , 'cptgz',
/
EOF
fi
#
if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval_2d}"
 file_interval    = "${file_interval_2d}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'psl'     , 'ts'      , 'clt'     ,
                    'prw'     , 'cllvi'   , 'clivi'   ,
                    'qrvi'    , 'qsvi'    , 'qgvi'    ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'prlr'    , 'prls'    , 'cptgzvi' ,
                    'pr_rain' , 'pr_snow' , 'pr_grpl' , 'pr_ice'  ,
!                    'udynvi_gmean' , 'duphyvi_gmean' , 'uphybal_gmean' ,
!                    'ufts_gmean'   , 'ufvs_gmean'    , 'ufcs_gmean' , 'kedisp_gmean' ,
!                    'radtop_gmean' , 'radbot_gmean'  , 'radbal_gmean'
/
EOF
fi

if [[ "$output_lnd" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval_2d}"
 file_interval    = "${file_interval_2d}"
 include_last     = .FALSE.
 ml_varlist       = 'pheno_lai_box'         , 'pheno_fract_fpc_veg'         , 'hydro_fract_wet_box' ,
                    'hydro_fract_snow_box'  , 'hydro_wtr_skin_box'          , 'hydro_weq_snow_box'  ,
                    'hydro_wtr_rootzone_box'
/
EOF
fi
# ICON
#
# ---------------------------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ---------------------------------------------------------------

#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

make_and_change_to_experiment_dir

for dir in ${ADDITIONAL_SUBDIRS[@]}; do
  mkdir -p $dir
done

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atm"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
  run_jsbach_standalone="false"
fi
run_jsbach=${run_jsbach="false"}
if [ x$jsbach_namelist != x ]; then
  run_jsbach="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ -z "$dont_create_icon_master_namelist" ]; then
  master_namelist=icon_master.namelist

  calendar=${calendar:="proleptic gregorian"}
  calendar_type=${calendar_type:=1}
  {
    echo "&master_nml"
    echo " lrestart               =  $restart"
    echo " read_restart_namelists =  $read_restart_namelists"
    echo "/"

    if [ -z "$nsteps" ]; then
      echo "&master_time_control_nml"
      echo " calendar             = '$calendar'"
      echo " experimentStartDate  = '$start_date'"
      echo " restartTimeIntval    = '$restart_interval'"
      echo " checkpointTimeIntval = '$checkpoint_interval'"
      if [ -n "$end_date" ]; then
        echo " experimentStopDate = '$end_date'"
      fi
      echo "/"

      echo "&time_nml"
      echo " is_relative_time     = .false."
      echo "/"

    else # $nsteps is set -> use time_nml:ini_datetime_string
      echo "&time_nml"
      echo " calendar             =  $calendar_type"
      echo " ini_datetime_string  = '$start_date'"
      echo " dt_restart           =  $dt_restart"
      echo "/"
    fi
  } > $master_namelist

fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    model_rank_group_size=$7
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
  model_rank_group_size=$model_rank_group_size
/
EOF
  fi

  #-----------
  #get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

rank_group_size=1
j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]} ${rank_group_size}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

if [[ $run_jsbach == yes  ]] || [[ $run_jsbach == true ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  no_of_domains=$(echo ${atmo_dyn_grids} | wc -w)
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
  if [[ ${run_jsbach_standalone} != true ]]; then
    if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
      mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
      check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
    else
      check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
    fi
  fi
  j=`expr ${j} + 1`
done
fi

#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
#
#-----------------------------------------------------------------------------

#
# configure START_MODEL_function
#
# TODO: be less atmospheric centric, i.e. do not assume that atmosphere is always component 1
ICON_COMPONENT1_VH_procs=$(( ${num_restart_procs:-0} + ${num_io_procs:-0} + ${num_prefetch_proc:-0} + ${num_io_procs_radar:-0}))

#
# start experiment
#

# Combine START and MODEL if START_MODEL is not already set.
# START_MODEL is used to ease the execution of a machine that uses a complex
# mpirun command with multiple binaries
START_MODEL="${START_MODEL:=$START $MODEL}"


rm -f finish.status
#
date
set -x
${START_MODEL} || exit 1
set +x
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
