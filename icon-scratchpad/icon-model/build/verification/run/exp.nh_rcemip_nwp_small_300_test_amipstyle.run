#! /bin/bash
#-----------------------------------------------------------------------------
set +x

#-----------------------------------------------------------------------------
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/run/make_target_runscript
# target machine is default
# target use_compiler is gcc
# with_mpi=no
# with_openmp=no
# memory_model=large
# submit with 
#
builder=default_gcc
#-----------------------------------------------------------------------------
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=static
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
: ${no_of_nodes:=1} ${mpi_procs_pernode:=1}
export no_of_nodes
export mpi_procs_pernode
num_io_procs=
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=48
nproma_sub=48
nblocks_c=0
proc0_shift=0
#
# Ecrad solver (0 for CPU/vector, 2 for GPU)
# ------------------------------------------
radiation_ecrad_isolver=0
#
#-----------------------------------------------------------------------------

# load local setting, if existing
# -------------------------------
if [ -a /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting ]
then
  echo "Load Setting"
  . /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="nh_rcemip_nwp_small_300_test_amipstyle"

#-----------------------------------------------------------------------------
# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
export basedir="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification"
# experiments_dir can be predefined in a machine specific run_target_* header
experiments_dir="${experiments_dir:=${basedir}/experiments}"
export icon_data_rootFolder="/home/primrose/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START=""
export MODEL="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/bin/icon"

set | grep SLURM

# how to submit the next job
# --------------------------
submit=""
job_name="exp.nh_rcemip_nwp_small_300_test_amipstyle.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ${basedir}/run/add_run_routines

#-----------------------------------------------------------------------------

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#=============================================================================
# 
# Run script for RCEMIP ICON-LEM / NWP experiments. See Wing et al. (2018,
# Geosci Mod Dev) for details. See also readme_icon-lem-nwp_rcemip.
# 
# James Ruppert
# james.ruppert@mpimet.mpg.de
# 8 July 2018
#
# ... slightly modified by 
# Nicolas Rochetin
# nicolas.rochetin@mpimet.mpg.de
# 30 August 2018
#=============================================================================
#
atmo_dyn_grids=Torus_Triangles_100x116_1000m.nc
#
#-----------------------------------------------------------------------------
# model time step
modelTimeStep="PT05S"
radiationTimeStep="PT1M"
#
#-----------------------------------------------------------------------------
# start and end date+time
 start_date=${start_date:="2008-08-01T00:00:00Z"}
     end_date=${end_date:="2008-08-01T00:08:00Z"}  # 100 days in full run

grid='100x116_1000m' # 100 km square
testcase_name='RCEMIP_analytical'

# restart intervals
# checkpoint_interval="P2Y"
# restart_interval="P1M"
checkpoint_interval="P20D" # frequency for writing restart file
restart_interval="P20D" # stop the simulation at this interval

# output intervals
 output_interval_2d="PT1H"
 output_interval_3d="PT1H"
 file_interval_2d="PT8H"
 file_interval_3d="PT8H"
#
 output_atm_cgrid="no" # 1 file
 output_atm_2d="yes"   # 1 file 
 output_atm_3d="yes"   # 1 file
 output_phy_3d="no"   # 1 file
#
# determine the number of io processes
#
num_io_procs=0

if [[ "$output_atm_cgrid" == "yes" ]]; then
  num_io_procs=`expr ${num_io_procs} + 1`
fi
if [[ "$output_atm_2d" == "yes" ]]; then
  num_io_procs=`expr ${num_io_procs} + 1`
fi
if [[ "$output_atm_3d" == "yes" ]]; then
  num_io_procs=`expr ${num_io_procs} + 1`
fi
if [[ "$output_phy_3d" == "yes" ]]; then
  num_io_procs=`expr ${num_io_procs} + 1`
fi

# namelist files
atmo_namelist=NAMELIST_${EXPNAME}_atm

#-----------------------------------------------------------------------------
#
# write icon namelist parameters
# ------------------------
# for a complete list see namelist_overview and namelist_overview.pdf
#
cat >> ${atmo_namelist} << EOF
&parallel_nml
 nproma            = ${nproma}
 num_io_procs      = ${num_io_procs}
 !num_restart_procs = 1
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grids}",
/
&run_nml
 num_lev        = 75,     ! number of full levels of vertical grid
 modelTimeStep  = "$modelTimeStep"
 ltestcase      = .TRUE.       ! run testcase
 ltransport     = .TRUE.
 ntracer        = 0            ! the model updates this for the microphysics vars
 iforcing       = 3  ! 3: NWP forcing; 6:inhecham forcing
 ltimer         = .true.       ! 
 output         = 'nml'
 msg_level      = 12           ! detailed report during integration
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
 profiling_output = 1           ! aggregated: 1; detailed: 2; in files: 3
/
&nh_testcase_nml
 nh_test_name   = 'RCEMIP_analytical'     ! test case identifier
 ape_sst_case   = 'sst_const'
 ape_sst_val    = 26.85 ! fixed SST in degree Celsius
 tpe_temp       = 300.0 ! fixed SST in degree Celsius
 w_perturb      = 0.1        ! m/s, default=0.05
 th_perturb     = 0.3        ! K, default=0.2
 zenithang      = 42.05 ! degrees
 sol_const      = 551.58
 albedo_set     = 0.07 ! fixed surface albedo; default is 0.07
/
&io_nml                 ! special for NWP?
 lkeep_in_sync  = .true.
 lflux_avg      = .FALSE. ! default is true. True = time-ave, False = accumulated.
/
&nonhydrostatic_nml
 ivctype        = 2       ! sleve vertical coordinate
 damp_height    = 19000.  ! top_height-damp_height should be about 15km
 rayleigh_type  = 1       ! 1 = Classical (all vars), 2 = w only
! rayleigh_coeff = 0.25    ! default: 0.05 /s (with rayleigh_type = 2)
 rayleigh_coeff = 0.003    ! default: 0.05 /s (with rayleigh_type = 2)
/
&sleve_nml
 top_height = 48000.0 ! these settings yield an actual model top of about 34 km
 min_lay_thckn = 75. ! thickness of lowest model layer
 max_lay_thckn   = 500.    ! max thickness
 htop_thcknlimit = 40000.0 ! dont exceed max_lay_thckn below this height
 stretch_fac     = 1.2     ! values > 1 increase dz near model top
/
&dynamics_nml
 divavg_cntrwgt = 0.50
 lcoriolis      = .FALSE.
/
&nwp_phy_nml
 inwp_gscp       = 4 ! 4:Seifert microphysics
 inwp_convection = 0 ! 1:Tiedtke/Bechtold
 inwp_radiation  = 1 ! 1:RRTM radiation, 3:PSRAD
 inwp_cldcover   = 1 ! 5: all or nothing
 inwp_turb       = 1 ! 5: Smagorinsky diffusion (Dipankar et al.)
 inwp_gwd        = 0 ! gravity wave drag
 inwp_sso        = 0 ! orographic drag
 inwp_satad      = 1 ! saturation adjustment  (on/off)
 inwp_surface    = 0 ! 0: none; 1: TERRA
 latm_above_top  = .true.
 dt_conv         = 300. ! Time step of cu param AND cloud cover call [s]
 dt_rad          = 300. ! check with "$radiationTimeStep" ! ... of radiation call
/
&les_nml
 sst               = 300.0
 isrfc_type        = 5  ! 2=Fixed flux, 5=fixed SST, 3=fixed bflux
 expname           = '${EXPNAME}'
 avg_interval_sec = 3600.
 sampl_freq_sec   = 300.
 ldiag_les_out    = .TRUE.
 km_min           = 0.0
 min_sfc_wind     = 0.0 ! minimum wind speed (m/s) assumed for flux calculation
/
&turbdiff_nml
 lconst_z0 = .TRUE.  ! horizontally homogeneous roughness length
 const_z0  = 0.0001  ! roughness length
/
&diffusion_nml
 lhdiff_temp      = .TRUE.
 lhdiff_vn        = .TRUE.
 lhdiff_w         = .TRUE.
 hdiff_order      = 5
/
&radiation_nml
 irad_o3    = 4 ! read in external ozone file
 izenith    = 5 ! 5: prescribed zenith angle; 6: equinox diurnal cycle
 irad_aero  = 0 ! switch off aerosols
 irad_cfc11 = 0 
 irad_cfc12 = 0
 irad_co2   = 2
 irad_ch4   = 2
 irad_n2o   = 2
 vmr_co2    =  348.e-06 ! RCEMIP values; modern-day values
 vmr_ch4    = 1650.e-09
 vmr_n2o    =  306.e-09
/
&extpar_nml
 itopo          = 0 ! 0: analytical topo; 1: topography/ext. data read from file
/
EOF
#
#----------------------------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
add_link_file ${basedir}/data/rrtmg_lw.nc                 rrtmg_lw.nc 
add_link_file ${basedir}/data/ECHAM6_CldOptProps.nc       ECHAM6_CldOptProps.nc
add_link_file ${basedir}/data/dmin_wetgrowth_lookup.nc    dmin_wetgrowth_lookup.nc    #for inwp_gscp==4

# boundary conditions
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
# - ozone
datadir=${basedir}/data/external
add_link_file ${datadir}/rcemip_analytical_o3_${grid}_nwp.nc            ./o3_icon_DOM01.nc
# namelist files
#
add_required_file ${basedir}/run/${atmo_namelist}                       ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim_fuernwp  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                           ./

#----------------------------------------------------------------------------------
#
# 
# End of namelist settings, automatic settings below.
# Model output directory is set below.
# 
#----------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 output_nml_dict  = "${dict_file}"
 netcdf_dict      = "${dict_file}"
 lnetcdf_flt64_output = .TRUE.
 itype_pres_msl   = 4
 restart_file_type= 5
 !restart_write_mode = "joint procs multifile"    !not necessary/useful in default r2b4 setup
/
EOF

# Define output files
# -------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.

#
if [[ "$output_atm_cgrid" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_cgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"          ! output_start = output_end
 output_end       = "${start_date}"          ! --> write once only irrespective of
 output_interval  = "${output_interval_2d}"  !     the output interval and
 file_interval    = "${file_interval_2d}"    !     the file interval
  ml_varlist       = 'clon'   , 'clat' , 'areacella',
                    'z_ifc'  , 'z_mc'
/
EOF
fi


#
if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval_2d}"
 file_interval    = "${file_interval_2d}"
 include_last     = .FALSE.
  ml_varlist       = 'ps'      , 'pfull'   , 'zg'      ,
                    'rho'     , 'ta'      , 'theta_v' ,
                    'ua'      , 'va'      , 'wa'     ,
                    'hus'     , 'clw'     , 'cli'     ,
/
EOF
fi


#
if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval_2d}"
 file_interval    = "${file_interval_2d}"
 include_last     = .FALSE.
 ml_varlist       = 'pres_sfc'      ,
                    't_g'     ,
                    'tqv_dia'     , 'tqc_dia'   , 'tqi_dia'   ,
                    'lhfl_s'     , 'shfl_s'   , 'clct'   ,
                    'sod_t'     , 'sou_t'   , 'qhfl_s'   ,
/
EOF
fi

# ICON
#
# ---------------------------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ---------------------------------------------------------------

#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

make_and_change_to_experiment_dir

for dir in ${ADDITIONAL_SUBDIRS[@]}; do
  mkdir -p $dir
done

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atm"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
  run_jsbach_standalone="false"
fi
run_jsbach=${run_jsbach="false"}
if [ x$jsbach_namelist != x ]; then
  run_jsbach="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ -z "$dont_create_icon_master_namelist" ]; then
  master_namelist=icon_master.namelist

  calendar=${calendar:="proleptic gregorian"}
  calendar_type=${calendar_type:=1}
  {
    echo "&master_nml"
    echo " lrestart               =  $restart"
    echo " read_restart_namelists =  $read_restart_namelists"
    echo "/"

    if [ -z "$nsteps" ]; then
      echo "&master_time_control_nml"
      echo " calendar             = '$calendar'"
      echo " experimentStartDate  = '$start_date'"
      echo " restartTimeIntval    = '$restart_interval'"
      echo " checkpointTimeIntval = '$checkpoint_interval'"
      if [ -n "$end_date" ]; then
        echo " experimentStopDate = '$end_date'"
      fi
      echo "/"

      echo "&time_nml"
      echo " is_relative_time     = .false."
      echo "/"

    else # $nsteps is set -> use time_nml:ini_datetime_string
      echo "&time_nml"
      echo " calendar             =  $calendar_type"
      echo " ini_datetime_string  = '$start_date'"
      echo " dt_restart           =  $dt_restart"
      echo "/"
    fi
  } > $master_namelist

fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    model_rank_group_size=$7
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
  model_rank_group_size=$model_rank_group_size
/
EOF
  fi

  #-----------
  #get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

rank_group_size=1
j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]} ${rank_group_size}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

if [[ $run_jsbach == yes  ]] || [[ $run_jsbach == true ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  no_of_domains=$(echo ${atmo_dyn_grids} | wc -w)
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
  if [[ ${run_jsbach_standalone} != true ]]; then
    if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
      mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
      check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
    else
      check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
    fi
  fi
  j=`expr ${j} + 1`
done
fi

#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
#
#-----------------------------------------------------------------------------

#
# configure START_MODEL_function
#
# TODO: be less atmospheric centric, i.e. do not assume that atmosphere is always component 1
ICON_COMPONENT1_VH_procs=$(( ${num_restart_procs:-0} + ${num_io_procs:-0} + ${num_prefetch_proc:-0} + ${num_io_procs_radar:-0}))

#
# start experiment
#

# Combine START and MODEL if START_MODEL is not already set.
# START_MODEL is used to ease the execution of a machine that uses a complex
# mpirun command with multiple binaries
START_MODEL="${START_MODEL:=$START $MODEL}"


rm -f finish.status
#
date
set -x
${START_MODEL} || exit 1
set +x
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
