#! /bin/bash
#-----------------------------------------------------------------------------
set +x

#-----------------------------------------------------------------------------
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/run/make_target_runscript
# target machine is default
# target use_compiler is gcc
# with_mpi=no
# with_openmp=no
# memory_model=large
# submit with 
#
builder=default_gcc
#-----------------------------------------------------------------------------
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=static
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
: ${no_of_nodes:=1} ${mpi_procs_pernode:=1}
export no_of_nodes
export mpi_procs_pernode
num_io_procs=
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=48
nproma_sub=48
nblocks_c=0
proc0_shift=0
#
# Ecrad solver (0 for CPU/vector, 2 for GPU)
# ------------------------------------------
radiation_ecrad_isolver=0
#
#-----------------------------------------------------------------------------

# load local setting, if existing
# -------------------------------
if [ -a /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting ]
then
  echo "Load Setting"
  . /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="exclaim_ape_R02B04"

#-----------------------------------------------------------------------------
# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
export basedir="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification"
# experiments_dir can be predefined in a machine specific run_target_* header
experiments_dir="${experiments_dir:=${basedir}/experiments}"
export icon_data_rootFolder="/home/primrose/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START=""
export MODEL="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/bin/icon"

set | grep SLURM

# how to submit the next job
# --------------------------
submit=""
job_name="exp.exclaim_ape_R02B04.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ${basedir}/run/add_run_routines

#-----------------------------------------------------------------------------

#!/bin/ksh

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#=============================================================================
# EXCLAIM Aquaplanet setup (R02B04) for BUILDBOT tests using NWP physics. Radiation is done
# on original grid

# Date: 16 June. Authors:  Anurag Dipankar, David Leutwyler, Abishek Gopal and Praveen Pothapakula
#
#=============================================================================
#=============================================================================
#
# This section of the run script contains the specifications of the experiment.
# The specifications are passed by namelist to the program.
# For a complete list see Namelist_overview.pdf
#
#=============================================================================


# (0) Basic model configuration
# -----------------------------

atmos_gridID="0013"
atmos_refinement="R02B04"

#
#--------------------------------------------------------------------------------------------------
#
# (1) Define the model time stepping
# ----------------------------------

atmTimeStep=2                  # atmosphere time step [s]

dt_rad=`expr 6 \* $atmTimeStep`
dt_conv=`expr 2 \* $atmTimeStep`
dt_ccov=`expr 2 \* $atmTimeStep`
dt_gwd=`expr 4 \* $atmTimeStep`
#--------------------------------------------------------------------------------------------------

# (2) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}"

#--------------------------------------------------------------------------------------------------

# (3) Set variables needed by the scripting mechanism
# ---------------------------------------------------

# horizontal grid(s)
# ------------------
atmo_grid_folder=${icon_data_poolFolder}/buildbot_data/nwp/grids/public/edzw/
atmo_dyn_grid=${atmo_grid_folder}/icon_grid_${atmos_gridID}_${atmos_refinement}_R.nc


###  Inorder to avoid path issues the radiation and atmosphere grid are the same. 

# start and end date+time
start_date=${start_date:="2000-01-01T00:00:00Z"}
end_date=${end_date:="2000-01-01T00:00:30Z"}

# restart intervals (set in master namelist)
# ---------------------------
checkpoint_interval="P1D"
restart_interval="P1D"

# output intervals
# ----------------

#output_bounds="0.,10000000.,600"
#steps_per_file=6

atm_file_interval="P1D"
atm_file_interval_2d="P1D"
atm_file_interval_3d="P1D"
atm_file_interval_pl="P1D"

atm_output_interval="PT2S"
atm_output_interval_2d="PT2S"
atm_output_interval_3d="PT2S"
atm_output_interval_pl="PT2S"

# namelist files
# --------------
atm_namelist=NAMELIST_${EXPNAME}
atmo_namelist=${atm_namelist}

# files needed for radiation
add_link_file ${basedir}/externals/ecrad/data ecrad_data

#-----------------------------------------------------------------------------
# II. ATMOSPHERE and LAND
#-----------------------------------------------------------------------------


cat > ${basedir}/run/${atmo_namelist} << EOF
! parallel_nml: MPI parallelization ------------------------------------------
&parallel_nml
 nproma                      =                   ${nproma}        ! loop chunk length
 nblocks_c                   =                   ${nblocks_c}     ! loop number of cell blocks
 nproma_sub                  =                  ${nproma_sub}     ! loop chunk length for radiation scheme
 p_test_run                  =                     .FALSE.        ! .TRUE. means verification run for MPI parallelization
 num_io_procs                =                          1         ! number of I/O processors
 num_restart_procs           =                          0         ! number of restart processors
 iorder_sendrecv             =                          3         ! sequence of MPI send/receive calls
/

! grid_nml: horizontal grid --------------------------------------------------
&grid_nml
 dynamics_grid_filename      =                   "$atmo_dyn_grid" ! array of the grid filenames for the dycore
 lredgrid_phys               =                      .FALSE.        ! .true.=radiation is calculated on a reduced grid
/

! run_nml: general switches ---------------------------------------------------
&run_nml
 num_lev                     =                         60         ! number of full levels of vertical grid
 dtime                       =                   ${atmTimeStep}   ! [s] timestep in seconds
 ldynamics                   =                     .TRUE.         ! dynamics                     --> dynamics_ctl, diffusion_ctl
 ltransport                  =                     .TRUE.         ! switch on tracer transport   --> transport_ctl
 iforcing                    =                          3         ! 0: dynamical core only, 1: Held-Suarez, 2: ECHAM, 3: NWP
 ltestcase                   =                     .TRUE.         ! run testcase                 --> testcase_ctl
 ntracer                     =                          5         ! number of tracers
 msg_level                   =                         12         ! detailed report during integration
 ltimer                      =                     .TRUE.         ! timer for monitoring the runtime of specific routines
 timers_level                =                         10         ! performance timer granularity
 check_uuid_gracefully       =                     .TRUE.         ! give only warnings for non-matching uuids
 output                      =                      "nml"         ! main switch for enabling/disabling components of the model output
/

! nwp_phy_nml: switches for the physics schemes ------------------------------
&nwp_phy_nml
 inwp_gscp                   =                          2         ! cloud microphysics and precipitation 0: none, 1: hydci, 2: hydci_gr
 mu_rain                     =                        0.5         ! shap parameter in gamma distribution for rain
 rain_n0_factor              =                        0.1         ! tuning factor for intercept parameter of raindrop size distr.
 inwp_convection             =                          1         ! convection
 lshallowconv_only           =                    .FALSE.         ! only shallow convection
 inwp_radiation              =                          4         ! 1: RRTM, 2: Ritter-Geleyn  4: ecRad:
 latm_above_top              =                      .TRUE.        ! take into account atmosphere above model top for radiation computation
 inwp_cldcover               =                          1         ! cloud cover scheme for radiation 5: all or nothing
 inwp_turb                   =                          1         ! 1: Raschendorfer, 5: Smagorinsky diffusion (Dipankar et al.)
 inwp_satad                  =                          1         ! saturation adjustment
 inwp_sso                    =                          0         ! subgrid scale orographic drag
 inwp_gwd                    =                          1         ! non-orographic gravity wave drag
 inwp_surface                =                          0         ! surface scheme (0: None, 1: TERRA)
 dt_rad                      =                       ${dt_rad}         ! time step for radiation in s
 dt_ccov                     =                       ${dt_ccov}
 dt_gwd                      =                       ${dt_gwd}
 dt_conv                     =                       ${dt_conv}
/

! turbdiff_nml: turbulent diffusion -------------------------------------------
&turbdiff_nml
 tkhmin                      =                       0.01         ! minimum limiter for Ks (needed for stability, but unphysical)
 tkhmin_strat                =                       0.01
 tkmmin                      =                       0.01
 tkmmin_strat                =                       0.01
 rlam_heat                   =                        1.0         ! Scaling factor of the laminar boundary layer for heat (scalars)
 pat_len                     =                       100.         ! effective length scale of thermal surface patterns
 rat_sea                     =                        9.0         ! Ratio of laminar scaling factors for scalars over sea and land.
 q_crit                      =                        1.6         ! critical value for normalized super-saturation
 tur_len                     =                        150         ! Asymptotic maximal turbulent distance
/

! radiation_nml: radiation scheme ---------------------------------------------
&radiation_nml
ecrad_isolver                =                          2
izenith                     =                          3         ! zenith angle formula for the radiative transfer computation 3: perpetual equinox
 albedo_type                 =                          3         ! type of surface albedo
 albedo_fixed                =                        0.2         ! DL: Discuss value!
 irad_o3                     =                         0         ! ozone climatology 7: GEMS ozone climatology !DL: Want 4 for Aquaplanet
 irad_aero                   =                         2         ! aerosol climatology 0: no aerosols 2: global constant
 irad_h2o                    =                         1
 irad_co2                    =                         0
 irad_ch4                    =                         0
 irad_n2o                    =                         0
 irad_o2                     =                         0
 irad_cfc11                  =                         0
 irad_cfc12                  =                         0
 icld_overlap                =                         2         ! Generalized Random
 ecrad_data_path             =             './ecrad_data'        ! Optical property files path ecRad (link files as path is truncated inside ecrad)
/

! nonhydrostatic_nml: nonhydrostatic model -----------------------------------
&nonhydrostatic_nml
 iadv_rhotheta               =                         2         ! advection method for rho and rhotheta 2: Miura 2nd order
 ivctype                     =                         2         ! type of vertical coordinate 1: gal-chen hybrid 2:sleve
 itime_scheme                =                         4         ! time integration scheme
 ndyn_substeps               =                         5         ! number of dynamics steps per fast-physics step
 damp_height                 =                   50000.0         ! height at which Rayleigh damping of vertical wind starts
 rayleigh_coeff              =                       0.1         ! Rayleigh damping coefficient
 divdamp_order               =                        24         ! order of divergence damping
 divdamp_type                =                         3         ! type of divergence damping
 divdamp_fac                 =                    0.0025         ! scaling factor for divergence damping
 l_zdiffu_t                  =                   .FALSE.         ! specifies computation of Smagorinsky temperature diffusion
 htop_moist_proc             =                   22500.0         ! max. height for moist physics
 hbot_qvsubstep              =                   22500.0         ! height above which QV is advected with substepping scheme
/

! sleve_nml: vertical level specification -------------------------------------
&sleve_nml                              ! vertical grid standard output for message level >= 15
 min_lay_thckn               =                       50.         ! lowest level thickness (between half-levels)
 top_height                  =                    75000.         ! Height of model Top
 stretch_fac                 =                       0.9         ! stretching towards model top
 decay_scale_1               =                     4000.         ! decay scales for topography
 decay_scale_2               =                     2500.
 decay_exp                   =                       1.2
 flat_height                 = 16000.                            ! Height above which the coordinate surfaces are flat DL: set to 20, since no topo?
/

! dynamics_nml: dynamical core -----------------------------------------------
&dynamics_nml
 lcoriolis                   =                    .TRUE.         ! Coriolis Force
/

! nh_testcase_nml: testcase namelist ------------------------------------------
&nh_testcase_nml
 nh_test_name                =                 'APE_nwp'         ! test case identifier
 ape_sst_case                =                'sst_qobs'         ! sst distribution
 zp_ape                      =                    101325         ! surface pressure [Pa]
 ztmc_ape                    =                    50.006         ! total moisture content [kg/m^2]
/

! transport_nml: tracer transport ---------------------------------------------
&transport_nml
 ihadv_tracer                =              52,2,2,2,2,2         ! gdm: 52 combination of hybrid FFSL/Miura3 with subcycling
 itype_hlimit                =               3,4,4,4,4,4         ! type of limiter for horizontal transport
 ivadv_tracer                =               3,3,3,3,3,3         ! tracer specific method to compute vertical advection
 itype_vlimit                =               1,2,1,2,3,1         ! Type of limiter for vertical transport
 llsq_svd                    =                     .TRUE.        ! use SV decomposition for least squares design matrix
/

! diffusion_nml: horizontal (numerical) diffusion ----------------------------
&diffusion_nml
 lhdiff_vn                   =                    .TRUE.         ! diffusion on the horizontal wind field
 lhdiff_temp                 =                    .TRUE.         ! diffusion on the temperature field
 lhdiff_w                    =                    .TRUE.         ! diffusion on the vertical wind field
 hdiff_order                 =                         5         ! order of nabla operator for diffusion
 itype_vn_diffu              =                         1         ! reconstruction method used for Smagorinsky diffusion
 itype_t_diffu               =                         2         ! discretization of temperature diffusion
 hdiff_efdt_ratio            =                      24.0         ! ratio of e-folding time to time step
 hdiff_smag_fac              =                     0.025         ! scaling factor for Smagorinsky diffusion
/

! io_nml: general switches for model I/O -------------------------------------
&io_nml
 lnetcdf_flt64_output        =                    .TRUE.         ! Needed for probtest
 write_last_restart          =                    .TRUE.
 itype_pres_msl              =                         4         ! 4: IFS method
 restart_file_type           =                         5         ! 5: NetCDF4
 restart_write_mode          =   "joint procs multifile"
 itype_rh                    =                         1         ! RH w.r.t. water
/

! initicon_nml: specify read-in of initial state ------------------------------
! Needed for probtest
&initicon_nml
 pinit_seed                  =                               -1  ! seed for perturbation of initial model state. no perturbation by default
 pinit_amplitude             =                               0.  ! amplitude of perturbation
/

! output namelist: specify output of 2D fields  ------------------------------
&output_nml
 output_filename             =              '${EXPNAME}_atm_2d'  ! file name base
 filetype                    =                               5   ! output format 5:NetCDFv4
 filename_format             = "<output_filename>_<datetime2>"   ! Output filename format
 output_start                =          "2000-01-01T00:00:03Z"
 output_end                  =                   "${end_date}"
 output_interval             =     "${atm_output_interval_2d}"
 file_interval               =      "${atm_file_interval_2d}"
 include_last                =                          .TRUE.   ! flag whether to include the last time step
 remap                       =                               0   ! 0: no remapping 1: lat-lon grid
 reg_lat_def                 =                    -90,0.5,90.0
 reg_lon_def                 =                  -180,0.5,179.5
 output_grid                 =                          .TRUE.
 ml_varlist                  = 'pres_sfc',
                               'tqv'     , 'tqc'     , 'tqi'     ,
                               'tqr'     , 'tqs'     ,
                               'clch'    , 'clcm'    , 'clcl'    , 'clct'   ,
                               'tot_prec','prec_gsp',
                               't_2m'    , 'qv_2m'   , 'u_10m'  , 'v_10m'   ,
                               't_g'     , 'rh_2m' , 'qv_s', 'tcm','tch',
                               'lhfl_s'  , 'shfl_s' , 'umfl_s', 'vmfl_s'
                               'sob_s'   , 'sob_t' , 'sod_t',  'sou_s',
                               'thb_s'   , 'thb_t' ,'thu_s','pres_sfc'
/

&output_nml
 output_filename             =             '${EXPNAME}_atm_3d_pl'! file name base
 filetype                    =                               5   ! output format: 2=GRIB2, 4=NetCDFv2, 5=NetCDFv4
 filename_format             = "<output_filename>_<datetime2>"
 output_start                =                 "${start_date}"
 output_end                  =                   "${end_date}"
 output_interval             =     "${atm_output_interval_pl}"
 file_interval               =       "${atm_file_interval_pl}"
 include_last                =                         .TRUE.    ! flag whether to include the last time step
 remap                       =                              0    ! 0: no remapping 1: lat-lon grid
 reg_lat_def                 =                   -90,0.5,90.0
 reg_lon_def                 =                 -180,0.5,179.5
 output_grid                 =                          .TRUE.
 p_levels                    = 10000,20000,25000,30000,50000,70000,85000,90000,95000,100000
 pl_varlist                  = 'geopot', 'temp','u', 'v', 'w', 'qv', 'qc', 'qi'
/
EOF
#---------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
. ${thisdir}/add_required_atmo_non-hydrostatic_files
#----------------------------------------------------------------------------------
# ICON
#
# ---------------------------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ---------------------------------------------------------------

#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

make_and_change_to_experiment_dir

for dir in ${ADDITIONAL_SUBDIRS[@]}; do
  mkdir -p $dir
done

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atm"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
  run_jsbach_standalone="false"
fi
run_jsbach=${run_jsbach="false"}
if [ x$jsbach_namelist != x ]; then
  run_jsbach="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ -z "$dont_create_icon_master_namelist" ]; then
  master_namelist=icon_master.namelist

  calendar=${calendar:="proleptic gregorian"}
  calendar_type=${calendar_type:=1}
  {
    echo "&master_nml"
    echo " lrestart               =  $restart"
    echo " read_restart_namelists =  $read_restart_namelists"
    echo "/"

    if [ -z "$nsteps" ]; then
      echo "&master_time_control_nml"
      echo " calendar             = '$calendar'"
      echo " experimentStartDate  = '$start_date'"
      echo " restartTimeIntval    = '$restart_interval'"
      echo " checkpointTimeIntval = '$checkpoint_interval'"
      if [ -n "$end_date" ]; then
        echo " experimentStopDate = '$end_date'"
      fi
      echo "/"

      echo "&time_nml"
      echo " is_relative_time     = .false."
      echo "/"

    else # $nsteps is set -> use time_nml:ini_datetime_string
      echo "&time_nml"
      echo " calendar             =  $calendar_type"
      echo " ini_datetime_string  = '$start_date'"
      echo " dt_restart           =  $dt_restart"
      echo "/"
    fi
  } > $master_namelist

fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    model_rank_group_size=$7
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
  model_rank_group_size=$model_rank_group_size
/
EOF
  fi

  #-----------
  #get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

rank_group_size=1
j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]} ${rank_group_size}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

if [[ $run_jsbach == yes  ]] || [[ $run_jsbach == true ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  no_of_domains=$(echo ${atmo_dyn_grids} | wc -w)
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
  if [[ ${run_jsbach_standalone} != true ]]; then
    if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
      mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
      check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
    else
      check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
    fi
  fi
  j=`expr ${j} + 1`
done
fi

#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
#
#-----------------------------------------------------------------------------

#
# configure START_MODEL_function
#
# TODO: be less atmospheric centric, i.e. do not assume that atmosphere is always component 1
ICON_COMPONENT1_VH_procs=$(( ${num_restart_procs:-0} + ${num_io_procs:-0} + ${num_prefetch_proc:-0} + ${num_io_procs_radar:-0}))

#
# start experiment
#

# Combine START and MODEL if START_MODEL is not already set.
# START_MODEL is used to ease the execution of a machine that uses a complex
# mpirun command with multiple binaries
START_MODEL="${START_MODEL:=$START $MODEL}"


rm -f finish.status
#
date
set -x
${START_MODEL} || exit 1
set +x
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
