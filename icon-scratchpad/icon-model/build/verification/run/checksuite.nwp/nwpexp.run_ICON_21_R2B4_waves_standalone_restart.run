#! /bin/bash
#-----------------------------------------------------------------------------
set +x

#-----------------------------------------------------------------------------
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/run/make_target_runscript
# target machine is default
# target use_compiler is gcc
# with_mpi=no
# with_openmp=no
# memory_model=large
# submit with 
#
builder=default_gcc
#-----------------------------------------------------------------------------
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=static
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
: ${no_of_nodes:=1} ${mpi_procs_pernode:=1}
export no_of_nodes
export mpi_procs_pernode
num_io_procs=
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=48
nproma_sub=48
nblocks_c=0
proc0_shift=0
#
# Ecrad solver (0 for CPU/vector, 2 for GPU)
# ------------------------------------------
radiation_ecrad_isolver=0
#
#-----------------------------------------------------------------------------

# load local setting, if existing
# -------------------------------
if [ -a /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting ]
then
  echo "Load Setting"
  . /home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="run_ICON_21_R2B4_waves_standalone_restart"

#-----------------------------------------------------------------------------
# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
export basedir="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification"
# experiments_dir can be predefined in a machine specific run_target_* header
experiments_dir="${experiments_dir:=${basedir}/experiments}"
export icon_data_rootFolder="/home/primrose/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START=""
export MODEL="/home/primrose/Work/IconGrounds/icon-dace/icon-scratchpad/icon-model/build/verification/bin/icon"

set | grep SLURM

# how to submit the next job
# --------------------------
submit=""
job_name="nwpexp.run_ICON_21_R2B4_waves_standalone_restart.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ${basedir}/run/add_run_routines

#-----------------------------------------------------------------------------

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

# ----------------------------------------------------------------------------
#
# ICON-waves.
#
# The purpose is the technical testing of the ICON-waves in standalone (non-coupled) mode.
# Runs globally on a R2B4 grid.
# The experiment writes checkpoint files asychronously, and restarts from the
# latest checkpoint file, in order to check the correctness of the restart
# functionality.
#
# Mikhail Dobrynin, Daniel Reinert 2024
#
#=============================================================================


make_and_change_to_experiment_dir # function in ../add_run_routines

# Combine START and MODEL if START_MODEL is not already set.
# START_MODEL is used to ease the execution of a machine that uses a complex
# mpirun command with multiple binaries
START_MODEL="${START_MODEL:=$START $MODEL}"

# set icon_data_poolFolder
icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/buildbot_data/nwp"

# base directory for ICON sources, binary and auxilary data:
ICONDIR="${basedir}" # basedir can be set with create_target_header

# root directory for input data
DATAROOT="${icon_data_poolFolder}/Checksuite_data"

# directory with input grids:
GRIDDIR=${DATAROOT}/ICON-waves

# directory with external parameter data:
EXTPARDIR=${DATAROOT}/ICON-waves

# directory with forcing data:
FORCINGDIR=${DATAROOT}/ICON-waves/exp_standalone


# ----------------------------------------------------------------------------
# copy input data: grids, external parameters, model
# ----------------------------------------------------------------------------

# delete existing restart files
#rm -rf *restart_*

# grid files
ln -sf ${GRIDDIR}/ocean_icon_waves_grid_0010_R02B04_G_DOM01.nc ocean_icon_waves_grid_0021_R02B04_G_DOM01.nc

# external parameter (from ExtPar tool)
ln -sf ${EXTPARDIR}/extpar_ocean_icon_waves_grid_0010_R02B04_G_DOM01.nc extpar_ocean_icon_waves_grid_0021_R02B04_G_DOM01.nc

# forcing files
ln -sf ${FORCINGDIR}/ocean_waves_R2B4_19790101T000000_wind.nc ocean_waves_R2B4_19790101T000000_wind.nc
ln -sf ${FORCINGDIR}/ocean_waves_R2B4_19790101T000000_ice.nc ocean_waves_R2B4_19790101T000000_ice.nc

# copy binary
cp -p $MODEL icon


# ----------------------------------------------------------------------------
# grid namelist settings
# ----------------------------------------------------------------------------
wave_grid=ocean_icon_waves_grid_0021_R02B04_G_DOM01.nc
wave_extpar=extpar_ocean_icon_waves_grid_0021_R02B04_G_DOM01.nc

dynamics_grid_filename=""
for gridfile in ${wave_grid}; do
  dynamics_grid_filename="${dynamics_grid_filename} '${gridfile}',"
done

num_io_procs=2
num_prefetch_proc=0
num_io_procs_radar=0
proc0_shift=0 # proc0_shift does not work yet with WAVES

#spectral resolution
nd=12          # NUMBER OF DIRECTIONS
nf=25          # NUMBER OF FREQUENCIES

wave_namelist=NAMELIST_${EXPNAME}

start_date="1979-01-01T00:00:00Z"
  end_date="1979-01-06T12:00:00Z"

dtime=600

# ----------------------------------------------------------------------------
# ============================================================================
#                        LOOP: MODEL IS EXECUTED TWO TIMES
# ============================================================================
for iter in 1 2 ; do


if [ $iter -eq 1 ] ; then

echo "##############################################################"
echo "###       Reference run                                    ###"
echo "##############################################################"

restart="       .FALSE. "
num_restart_procs="   1 "
checkpoint_intval="P03D"
ofile_prfx="wave-REF"

else

echo "##############################################################"
echo "###       Restart run                                      ###"
echo "##############################################################"

restart="        .TRUE. "
num_restart_procs="   1 "
checkpoint_intval="P03D"
ofile_prfx="wave-RST"

# remove output files written after restart because existing output files are opened
# in append mode in case of a restart (only relevant for manually executed tests)
rm -f ${ofile_prfx}*.nc ${ofile_prfx}*.grb

fi


cat > icon_master.namelist << EOF
&master_nml
 lrestart                     = ${restart}
/
&time_nml
 is_relative_time = .false.
/
&master_time_control_nml
 calendar             = "proleptic gregorian"
 experimentStartDate  = "$start_date"
 experimentStopDate   = "$end_date"
 checkpointTimeIntVal = "${checkpoint_intval}"
/
&master_model_nml
 model_type                  = 98
 model_name                  = "wave"
 model_namelist_filename     = "$wave_namelist"
 model_min_rank              = 1
 model_max_rank              = 65536
 model_inc_rank              = 1
/
EOF

cat > ${wave_namelist} << EOF
&coupling_mode_nml
 coupled_to_atmo      = .FALSE.
/
&run_nml
 num_lev              = 1
 dtime                = ${dtime}     ! [s] timestep in seconds
 ltimer               = .true.
 timers_level         = 10
 msg_level            = 14
 ltestcase            = .FALSE.       ! run testcase
 ldynamics            = .TRUE.
 ltransport           = .TRUE.       ! no horizontal transport of wave energy
 ntracer              = $((${nd}*${nf}))
 output               = "nml"
/
&parallel_nml
 nproma                  = ${nproma}             ! loop chunk length
 p_test_run              = .false.               ! .TRUE. means verification run for MPI parallelization
 l_test_openmp           = .false.
 l_log_checks            = .false.
 num_io_procs            = ${num_io_procs}       ! number of I/O processors
 num_restart_procs       = ${num_restart_procs}  ! number of restart processors
 num_prefetch_proc       = ${num_prefetch_proc}  ! number of processors for LBC prefetching
 num_io_procs_radar      = ${num_io_procs_radar} ! number of EMVORADO I/O processors
 proc0_shift             = ${proc0_shift}
 num_dist_array_replicas = 4
 iorder_sendrecv         = 1
/
&grid_nml
 dynamics_grid_filename  = ${dynamics_grid_filename}
/
&io_nml
 restart_write_mode      = "async"
/
&extpar_nml
 itopo = 0 !do not read atmospheric exp file
 extpar_filename = '${wave_extpar}'
/
&wave_nml
 ndirs       = ${nd}   ! number of directions
 nfreqs      = ${nf}   ! number of frequencies
 forc_file_prefix = 'ocean_waves_R2B4_19790101T000000' ! prefix of forcing file name
/
&energy_propagation_nml
 itype_limit  = 4     ! positive definite flux limiter
/
&output_nml
 filetype                =                          4         ! output format: 2=GRIB2, 4=NETCDFv2
 dom                     =                         -1         ! write all domains
 output_bounds           =        0., 10000000., 43200.       ! output: start, end, increment
 steps_per_file          =                          1         ! number of output steps in one output file
 mode                    =                          1         ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
 include_last            =                      .TRUE.        ! flag whether to include the last time step
 output_filename         =             '${ofile_prfx}'        ! file name base
 output_grid             =                      .TRUE.        ! flag whether grid information is added to output.
 ml_varlist              = 'group:wave_short', 'group:wave_spectrum', 'group:wave_phy', 'group:wave_debug'
/
&output_nml
 filetype                =                          4         ! output format: 2=GRIB2, 4=NETCDFv2
 dom                     =                         -1         ! write all domains
 output_bounds           =        0., 10000000., 10800.       ! output: start, end, increment
 steps_per_file          =                          1         ! number of output steps in one output file
 mode                    =                          1         ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
 include_last            =                      .TRUE.        ! flag whether to include the last time step
 output_filename         =          '${ofile_prfx}_ll'        ! file name base
 output_grid             =                      .TRUE.        ! flag whether grid information is added to output.
 remap                   =                          1         ! output on regular lat-lon grid
 reg_lon_def             =                 0., 1, 360.
 reg_lat_def             =                 -90.,1.,90.
 ml_varlist              = 'group:wave_short'
/
&output_nml
 filetype                =                          2         ! output format: 2=GRIB2, 4=NETCDFv2
 dom                     =                         -1         ! write all domains
 output_bounds           =        0., 10000000., 43200.       ! output: start, end, increment
 steps_per_file          =                          1         ! number of output steps in one output file
 mode                    =                          1         ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
 include_last            =                      .TRUE.        ! flag whether to include the last time step
 output_filename         =     '${ofile_prfx}_forcing'        ! file name base
 output_grid             =                      .TRUE.        ! flag whether grid information is added to output.
 ml_varlist              = 'group:wave_forcing'
/
&output_nml
 filetype                =                          4         ! output format: 2=GRIB2, 4=NETCDFv2
 dom                     =                         -1         ! write all domains
 output_bounds           =        0., 10000000., 43200.       ! output: start, end, increment
 steps_per_file          =                          1         ! number of output steps in one output file
 mode                    =                          1         ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
 include_last            =                      .TRUE.        ! flag whether to include the last time step
 output_filename         =      '${ofile_prfx}_2ocean'        ! file name base
 output_grid             =                      .TRUE.        ! flag whether grid information is added to output.
 ml_varlist              = 'u_stokes','v_stokes'
/
EOF



#
# configure START_MODEL_function
#
#ICON_COMPONENT1_VH_procs=$((num_restart_procs + num_io_procs + num_prefetch_proc + num_io_procs_radar))

# ----------------------------------------------------------------------------
# run the model!
# ----------------------------------------------------------------------------

$START_MODEL

# ----------------------------------------------------------------------------
done # iterations for restart testing
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# check model output
# ----------------------------------------------------------------------------

SCRIPT_STATUS=0
TEST_STATUS=0

# 2ocean output filenames
FILE_REF="wave-REF_2ocean_DOM01_ML_0011.nc"
FILE_RST="wave-RST_2ocean_DOM01_ML_0011.nc"

if [ ! -f ${FILE_REF} ] || [ ! -f ${FILE_RST} ]; then
  echo " Both or either of the files ${FILE_RFF} and ${FILE_RST} do not exist"
  SCRIPT_STATUS=$(($SCRIPT_STATUS + 1))
  exit $SCRIPT_STATUS
fi

echo "##############################################################"
echo "###       Restart test: check match of output files        ###"
echo "##############################################################"

# compare_output_files is defined in ./add_run_routines
compare_output_files "${FILE_REF}" "${FILE_RST}"
TEST_STATUS=$((TEST_STATUS + $?))

# forcing output filenames
FILE_REF="wave-REF_forcing_DOM01_ML_0011.grb"
FILE_RST="wave-RST_forcing_DOM01_ML_0011.grb"

if [ ! -f ${FILE_REF} ] || [ ! -f ${FILE_RST} ]; then
  echo " Both or either of the files ${FILE_RFF} and ${FILE_RST} do not exist"
  SCRIPT_STATUS=$(($SCRIPT_STATUS + 1))
  exit $SCRIPT_STATUS
fi

echo "##############################################################"
echo "###       Restart test: check match of output files        ###"
echo "##############################################################"

# compare_output_files is defined in ./add_run_routines
compare_output_files "${FILE_REF}" "${FILE_RST}"
TEST_STATUS=$((TEST_STATUS + $?))

# output filenames
FILE_REF="wave-REF_DOM01_ML_0011.nc"
FILE_RST="wave-RST_DOM01_ML_0011.nc"

if [ ! -f ${FILE_REF} ] || [ ! -f ${FILE_RST} ]; then
  echo " Both or either of the files ${FILE_RFF} and ${FILE_RST} do not exist"
  SCRIPT_STATUS=$(($SCRIPT_STATUS + 1))
  exit $SCRIPT_STATUS
fi

echo "##############################################################"
echo "###       Restart test: check match of output files        ###"
echo "##############################################################"

# compare_output_files is defined in ./add_run_routines
compare_output_files "${FILE_REF}" "${FILE_RST}"
TEST_STATUS=$((TEST_STATUS + $?))


if [ $TEST_STATUS == 0 ]; then
  echo " "
  echo "NWP test SUCCESSFUL"
  echo " "
else
  echo " "
  echo "NWP test FAILED:"
  echo " "
fi

EXIT_STATUS=$((TEST_STATUS + $?))

if [ "$EXIT_STATUS" -ne "0" ]; then
  echo "EXIT_STATUS: $EXIT_STATUS"
  exit $EXIT_STATUS
fi



